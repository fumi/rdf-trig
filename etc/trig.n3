@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>.
@prefix trig: <http://www.w3.org/ns/formats/TriG#>.
@prefix : <http://www.w3.org/ns/formats/TriG#>.
@prefix re: <http://www.w3.org/2000/10/swap/grammar/regex#>.
@prefix g: <http://www.w3.org/2000/10/swap/grammar/ebnf#>.

:language rdfs:isDefinedBy <>; g:start :trigDoc.

:trigDoc rdfs:label "trigDoc"; rdf:value "1g";
 rdfs:comment "[1g] trigDoc ::= (graph_statement)*";
  g:star 
    :graph_statement
.

:graph_statement rdfs:label "graph_statement"; rdf:value "2g";
 rdfs:comment "[2g] graph_statement ::= directive \".\" | graph";
  g:alt (
    [ g:seq (
      :directive
      "."
     ) ]
    :graph
   )
.

:graph rdfs:label "graph"; rdf:value "3g";
 rdfs:comment "[3g] graph ::= graphIri \"{\" triples* \"}\" | \"{\" triples* \"}\"";
  g:alt (
    [ g:seq (
      :graphIri
      "{"
      [ g:star 
        :triples
       ]
      "}"
     ) ]
    [ g:seq (
      "{"
      [ g:star 
        :triples
       ]
      "}"
     ) ]
   )
.

:graphIri rdfs:label "graphIri"; rdf:value "4g";
 rdfs:comment "[4g] graphIri ::= IRIref";
  g:seq ( :IRIref )
.

:directive rdfs:label "directive"; rdf:value "3";
 rdfs:comment "[3] directive ::= prefixID | base";
  g:alt (
    :prefixID
    :base
   )
.

:prefixID rdfs:label "prefixID"; rdf:value "4";
 rdfs:comment "[4] prefixID ::= PREFIX PNAME_NS IRI_REF";
  g:seq (
    :PREFIX
    :PNAME_NS
    :IRI_REF
   )
.

:base rdfs:label "base"; rdf:value "5";
 rdfs:comment "[5] base ::= BASE IRI_REF";
  g:seq (
    :BASE
    :IRI_REF
   )
.

:triples rdfs:label "triples"; rdf:value "6";
 rdfs:comment "[6] triples ::= subject predicateObjectList ( \".\" ( subject predicateObjectList)? )*";
  g:seq (
    :subject
    :predicateObjectList
    [ g:star 
      [ g:seq (
        "."
        [ g:opt 
          [ g:seq (
            :subject
            :predicateObjectList
           ) ]
         ]
       ) ]
     ]
   )
.

:predicateObjectList rdfs:label "predicateObjectList"; rdf:value "7";
 rdfs:comment "[7] predicateObjectList ::= verb objectList ( \";\" ( verb objectList)? )*";
  g:seq (
    :verb
    :objectList
    [ g:star 
      [ g:seq (
        ";"
        [ g:opt 
          [ g:seq (
            :verb
            :objectList
           ) ]
         ]
       ) ]
     ]
   )
.

:objectList rdfs:label "objectList"; rdf:value "8";
 rdfs:comment "[8] objectList ::= object ( \",\" object )*";
  g:seq (
    :object
    [ g:star 
      [ g:seq (
        ","
        :object
       ) ]
     ]
   )
.

:verb rdfs:label "verb"; rdf:value "9";
 rdfs:comment "[9] verb ::= predicate | \"a\"";
  g:alt (
    :predicate
    "a"
   )
.

:subject rdfs:label "subject"; rdf:value "10";
 rdfs:comment "[10] subject ::= IRIref | blank";
  g:alt (
    :IRIref
    :blank
   )
.

:predicate rdfs:label "predicate"; rdf:value "11";
 rdfs:comment "[11] predicate ::= IRIref";
  g:seq ( :IRIref )
.

:object rdfs:label "object"; rdf:value "12";
 rdfs:comment "[12] object ::= IRIref | blank | literal";
  g:alt (
    :IRIref
    :blank
    :literal
   )
.

:literal rdfs:label "literal"; rdf:value "13";
 rdfs:comment "[13] literal ::= RDFLiteral | NumericLiteral | BooleanLiteral";
  g:alt (
    :RDFLiteral
    :NumericLiteral
    :BooleanLiteral
   )
.

:blank rdfs:label "blank"; rdf:value "14";
 rdfs:comment "[14] blank ::= BlankNode | blankNodePropertyList | collection";
  g:alt (
    :BlankNode
    :blankNodePropertyList
    :collection
   )
.

:blankNodePropertyList rdfs:label "blankNodePropertyList"; rdf:value "15";
 rdfs:comment "[15] blankNodePropertyList ::= \"[\" predicateObjectList \"]\"";
  g:seq (
    "["
    :predicateObjectList
    "]"
   )
.

:collection rdfs:label "collection"; rdf:value "16";
 rdfs:comment "[16] collection ::= \"(\" object* \")\"";
  g:seq (
    "("
    [ g:star 
      :object
     ]
    ")"
   )
.

:RDFLiteral rdfs:label "RDFLiteral"; rdf:value "60s";
 rdfs:comment "[60s] RDFLiteral ::= String ( LANGTAG | ( \"^^\" IRIref ) )?";
  g:seq (
    :String
    [ g:opt 
      [ g:alt (
        :LANGTAG
        [ g:seq (
          "^^"
          :IRIref
         ) ]
       ) ]
     ]
   )
.

:NumericLiteral rdfs:label "NumericLiteral"; rdf:value "61s";
 rdfs:comment "[61s] NumericLiteral ::= NumericLiteralUnsigned | NumericLiteralPositive | NumericLiteralNegative";
  g:alt (
    :NumericLiteralUnsigned
    :NumericLiteralPositive
    :NumericLiteralNegative
   )
.

:NumericLiteralUnsigned rdfs:label "NumericLiteralUnsigned"; rdf:value "62s";
 rdfs:comment "[62s] NumericLiteralUnsigned ::= INTEGER | DECIMAL | DOUBLE";
  g:alt (
    :INTEGER
    :DECIMAL
    :DOUBLE
   )
.

:NumericLiteralPositive rdfs:label "NumericLiteralPositive"; rdf:value "63s";
 rdfs:comment "[63s] NumericLiteralPositive ::= INTEGER_POSITIVE | DECIMAL_POSITIVE | DOUBLE_POSITIVE";
  g:alt (
    :INTEGER_POSITIVE
    :DECIMAL_POSITIVE
    :DOUBLE_POSITIVE
   )
.

:NumericLiteralNegative rdfs:label "NumericLiteralNegative"; rdf:value "64s";
 rdfs:comment "[64s] NumericLiteralNegative ::= INTEGER_NEGATIVE | DECIMAL_NEGATIVE | DOUBLE_NEGATIVE";
  g:alt (
    :INTEGER_NEGATIVE
    :DECIMAL_NEGATIVE
    :DOUBLE_NEGATIVE
   )
.

:BooleanLiteral rdfs:label "BooleanLiteral"; rdf:value "65s";
 rdfs:comment "[65s] BooleanLiteral ::= \"true\" | \"false\"";
  g:alt (
    "true"
    "false"
   )
.

:String rdfs:label "String"; rdf:value "66s";
 rdfs:comment "[66s] String ::= STRING_LITERAL1 | STRING_LITERAL2 | STRING_LITERAL_LONG1 | STRING_LITERAL_LONG2";
  g:alt (
    :STRING_LITERAL1
    :STRING_LITERAL2
    :STRING_LITERAL_LONG1
    :STRING_LITERAL_LONG2
   )
.

:IRIref rdfs:label "IRIref"; rdf:value "67s";
 rdfs:comment "[67s] IRIref ::= IRI_REF | PrefixedName";
  g:alt (
    :IRI_REF
    :PrefixedName
   )
.

:PrefixedName rdfs:label "PrefixedName"; rdf:value "68s";
 rdfs:comment "[68s] PrefixedName ::= PNAME_LN | PNAME_NS";
  g:alt (
    :PNAME_LN
    :PNAME_NS
   )
.

:BlankNode rdfs:label "BlankNode"; rdf:value "69s";
 rdfs:comment "[69s] BlankNode ::= BLANK_NODE_LABEL | ANON";
  g:alt (
    :BLANK_NODE_LABEL
    :ANON
   )
.

:BASE rdfs:label "BASE"; rdf:value "17";
 rdfs:comment "[17] BASE ::= \"@base\"";
  g:seq (  "@base")
.

:PREFIX rdfs:label "PREFIX"; rdf:value "18";
 rdfs:comment "[18] PREFIX ::= \"@prefix\"";
  g:seq (  "@prefix")
.

:IRI_REF rdfs:label "IRI_REF"; rdf:value "70s";
 rdfs:comment "[70s] IRI_REF ::= \"<\" ( [^<>\\\"{}|^`\\\\] - [#x00-#x20] | UCHAR )* \">\"";
  re:seq (
    "<"
    [ re:star 
      [ re:alt (
        [ re:diff (
          [  re:matches "[^<>\\\"{}|^`\\\\]"  ]
          [  re:matches "[\u0000-\u0020]"  ]
         ) ]
        :UCHAR
       ) ]
     ]
    ">"
   )
.

:PNAME_NS rdfs:label "PNAME_NS"; rdf:value "71s";
 rdfs:comment "[71s] PNAME_NS ::= (PN_PREFIX)? \":\"";
  re:seq (
    [ re:opt 
      :PN_PREFIX
     ]
    ":"
   )
.

:PNAME_LN rdfs:label "PNAME_LN"; rdf:value "72s";
 rdfs:comment "[72s] PNAME_LN ::= PNAME_NS PN_LOCAL";
  re:seq (
    :PNAME_NS
    :PN_LOCAL
   )
.

:BLANK_NODE_LABEL rdfs:label "BLANK_NODE_LABEL"; rdf:value "73s";
 rdfs:comment "[73s] BLANK_NODE_LABEL ::= \"_:\" PN_LOCAL";
  re:seq (
    "_:"
    :PN_LOCAL
   )
.

:LANGTAG rdfs:label "LANGTAG"; rdf:value "76s";
 rdfs:comment "[76s] LANGTAG ::= BASE | PREFIX | \"@\" [a-zA-Z]+ ( \"-\" [a-zA-Z0-9]+ )*";
  re:alt (
    :BASE
    :PREFIX
    [ re:seq (
      "@"
      [ re:plus 
        [  re:matches "[a-zA-Z]"  ]
       ]
      [ re:star 
        [ re:seq (
          "-"
          [ re:plus 
            [  re:matches "[a-zA-Z0-9]"  ]
           ]
         ) ]
       ]
     ) ]
   )
.

:INTEGER rdfs:label "INTEGER"; rdf:value "77s";
 rdfs:comment "[77s] INTEGER ::= [0-9]+";
  re:plus 
    [  re:matches "[0-9]"  ]
.

:DECIMAL rdfs:label "DECIMAL"; rdf:value "78s";
 rdfs:comment "[78s] DECIMAL ::= [0-9]+ \".\" [0-9]+ | \".\" [0-9]+";
  re:alt (
    [ re:seq (
      [ re:plus 
        [  re:matches "[0-9]"  ]
       ]
      "."
      [ re:plus 
        [  re:matches "[0-9]"  ]
       ]
     ) ]
    [ re:seq (
      "."
      [ re:plus 
        [  re:matches "[0-9]"  ]
       ]
     ) ]
   )
.

:DOUBLE rdfs:label "DOUBLE"; rdf:value "79s";
 rdfs:comment "[79s] DOUBLE ::= [0-9]+ \".\" [0-9]+ EXPONENT | \".\" ( [0-9] )+ EXPONENT | ( [0-9] )+ EXPONENT";
  re:alt (
    [ re:seq (
      [ re:plus 
        [  re:matches "[0-9]"  ]
       ]
      "."
      [ re:plus 
        [  re:matches "[0-9]"  ]
       ]
      :EXPONENT
     ) ]
    [ re:seq (
      "."
      [ re:plus 
        [  re:matches "[0-9]"  ]
       ]
      :EXPONENT
     ) ]
    [ re:seq (
      [ re:plus 
        [  re:matches "[0-9]"  ]
       ]
      :EXPONENT
     ) ]
   )
.

:INTEGER_POSITIVE rdfs:label "INTEGER_POSITIVE"; rdf:value "80s";
 rdfs:comment "[80s] INTEGER_POSITIVE ::= \"+\" INTEGER";
  re:seq (
    "+"
    :INTEGER
   )
.

:DECIMAL_POSITIVE rdfs:label "DECIMAL_POSITIVE"; rdf:value "81s";
 rdfs:comment "[81s] DECIMAL_POSITIVE ::= \"+\" DECIMAL";
  re:seq (
    "+"
    :DECIMAL
   )
.

:DOUBLE_POSITIVE rdfs:label "DOUBLE_POSITIVE"; rdf:value "82s";
 rdfs:comment "[82s] DOUBLE_POSITIVE ::= \"+\" DOUBLE";
  re:seq (
    "+"
    :DOUBLE
   )
.

:INTEGER_NEGATIVE rdfs:label "INTEGER_NEGATIVE"; rdf:value "83s";
 rdfs:comment "[83s] INTEGER_NEGATIVE ::= \"-\" INTEGER";
  re:seq (
    "-"
    :INTEGER
   )
.

:DECIMAL_NEGATIVE rdfs:label "DECIMAL_NEGATIVE"; rdf:value "84s";
 rdfs:comment "[84s] DECIMAL_NEGATIVE ::= \"-\" DECIMAL";
  re:seq (
    "-"
    :DECIMAL
   )
.

:DOUBLE_NEGATIVE rdfs:label "DOUBLE_NEGATIVE"; rdf:value "85s";
 rdfs:comment "[85s] DOUBLE_NEGATIVE ::= \"-\" DOUBLE";
  re:seq (
    "-"
    :DOUBLE
   )
.

:EXPONENT rdfs:label "EXPONENT"; rdf:value "86s";
 rdfs:comment "[86s] EXPONENT ::= [eE] [+-]? [0-9]+";
  re:seq (
    [  re:matches "[eE]"  ]
    [ re:opt 
      [  re:matches "[+-]"  ]
     ]
    [ re:plus 
      [  re:matches "[0-9]"  ]
     ]
   )
.

:STRING_LITERAL1 rdfs:label "STRING_LITERAL1"; rdf:value "87s";
 rdfs:comment "[87s] STRING_LITERAL1 ::= \"'\" ( ( [^'\\\\\\n\\r] ) | ECHAR | UCHAR )* \"'\"";
  re:seq (
    "'"
    [ re:star 
      [ re:alt (
        [  re:matches "[^'\\\\\\n\\r]"  ]
        :ECHAR
        :UCHAR
       ) ]
     ]
    "'"
   )
.

:STRING_LITERAL2 rdfs:label "STRING_LITERAL2"; rdf:value "88s";
 rdfs:comment "[88s] STRING_LITERAL2 ::= '\"' ( ( [^\\\"\\\\\\n\\r] ) | ECHAR | UCHAR )* '\"'";
  re:seq (
    "\""
    [ re:star 
      [ re:alt (
        [  re:matches "[^\\\"\\\\\\n\\r]"  ]
        :ECHAR
        :UCHAR
       ) ]
     ]
    "\""
   )
.

:STRING_LITERAL_LONG1 rdfs:label "STRING_LITERAL_LONG1"; rdf:value "89s";
 rdfs:comment "[89s] STRING_LITERAL_LONG1 ::= \"'''\" ( ( \"'\" | \"''\" )? ( [^'\\\\] | ECHAR | UCHAR ) )* \"'''\"";
  re:seq (
    "'''"
    [ re:star 
      [ re:seq (
        [ re:opt 
          [ re:alt (
            "'"
            "''"
           ) ]
         ]
        [ re:alt (
          [  re:matches "[^'\\\\]"  ]
          :ECHAR
          :UCHAR
         ) ]
       ) ]
     ]
    "'''"
   )
.

:STRING_LITERAL_LONG2 rdfs:label "STRING_LITERAL_LONG2"; rdf:value "90s";
 rdfs:comment "[90s] STRING_LITERAL_LONG2 ::= '\"\"\"' ( ( '\"' | '\"\"' )? ( [^\\\"\\\\] | ECHAR | UCHAR ) )* '\"\"\"'";
  re:seq (
    "\"\"\""
    [ re:star 
      [ re:seq (
        [ re:opt 
          [ re:alt (
            "\""
            "\"\""
           ) ]
         ]
        [ re:alt (
          [  re:matches "[^\\\"\\\\]"  ]
          :ECHAR
          :UCHAR
         ) ]
       ) ]
     ]
    "\"\"\""
   )
.

:UCHAR rdfs:label "UCHAR"; rdf:value "19";
 rdfs:comment "[19] UCHAR ::= ( \"\\\\u\" HEX HEX HEX HEX ) | ( \"\\\\U\" HEX HEX HEX HEX HEX HEX HEX HEX )";
  re:alt (
    [ re:seq (
      "\\\\u"
      :HEX
      :HEX
      :HEX
      :HEX
     ) ]
    [ re:seq (
      "\\\\U"
      :HEX
      :HEX
      :HEX
      :HEX
      :HEX
      :HEX
      :HEX
      :HEX
     ) ]
   )
.

:ECHAR rdfs:label "ECHAR"; rdf:value "91s";
 rdfs:comment "[91s] ECHAR ::= \"\\\\\" [tbnrf\\\\\\\"']";
  re:seq (
    "\\\\"
    [  re:matches "[tbnrf\\\\\\\"']"  ]
   )
.

:NIL rdfs:label "NIL"; rdf:value "92s";
 rdfs:comment "[92s] NIL ::= \"(\" (WS)* \")\"";
  re:seq (
    "("
    [ re:star 
      :WS
     ]
    ")"
   )
.

:WS rdfs:label "WS"; rdf:value "93s";
 rdfs:comment "[93s] WS ::= \" \" | \"\\t\" | \"\\r\" | \"\\n\"";
  re:alt (
    " "
    "\\t"
    "\\r"
    "\\n"
   )
.

:ANON rdfs:label "ANON"; rdf:value "94s";
 rdfs:comment "[94s] ANON ::= \"[\" (WS)* \"]\"";
  re:seq (
    "["
    [ re:star 
      :WS
     ]
    "]"
   )
.

:PN_CHARS_BASE rdfs:label "PN_CHARS_BASE"; rdf:value "95s";
 rdfs:comment "[95s] PN_CHARS_BASE ::= [A-Z] | [a-z] | [#00C0-#00D6] | [#00D8-#00F6] | [#00F8-#02FF] | [#0370-#037D] | [#037F-#1FFF] | [#200C-#200D] | [#2070-#218F] | [#2C00-#2FEF] | [#3001-#D7FF] | [#F900-#FDCF] | [#FDF0-#FFFD] | [#10000-#EFFFF] | UCHAR";
  re:alt (
    [  re:matches "[A-Z]"  ]
    [  re:matches "[a-z]"  ]
    [  re:matches "[#00C0-#00D6]"  ]
    [  re:matches "[#00D8-#00F6]"  ]
    [  re:matches "[#00F8-#02FF]"  ]
    [  re:matches "[#0370-#037D]"  ]
    [  re:matches "[#037F-#1FFF]"  ]
    [  re:matches "[#200C-#200D]"  ]
    [  re:matches "[#2070-#218F]"  ]
    [  re:matches "[#2C00-#2FEF]"  ]
    [  re:matches "[#3001-#D7FF]"  ]
    [  re:matches "[#F900-#FDCF]"  ]
    [  re:matches "[#FDF0-#FFFD]"  ]
    [  re:matches "[#10000-#EFFFF]"  ]
    :UCHAR
   )
.

:PN_CHARS_U rdfs:label "PN_CHARS_U"; rdf:value "96s";
 rdfs:comment "[96s] PN_CHARS_U ::= PN_CHARS_BASE | \"_\"";
  re:alt (
    :PN_CHARS_BASE
    "_"
   )
.

:PN_CHARS rdfs:label "PN_CHARS"; rdf:value "98s";
 rdfs:comment "[98s] PN_CHARS ::= PN_CHARS_U | \"-\" | [0-9] | #00B7 | [#0300-#036F] | [#203F-#2040]";
  re:alt (
    :PN_CHARS_U
    "-"
    [  re:matches "[0-9]"  ]
    [  re:matches "[#00B7]"  ]
    [  re:matches "[#0300-#036F]"  ]
    [  re:matches "[#203F-#2040]"  ]
   )
.

:PN_PREFIX rdfs:label "PN_PREFIX"; rdf:value "99s";
 rdfs:comment "[99s] PN_PREFIX ::= PN_CHARS_BASE ( ( PN_CHARS | \".\" )* PN_CHARS )?";
  re:seq (
    :PN_CHARS_BASE
    [ re:opt 
      [ re:seq (
        [ re:star 
          [ re:alt (
            :PN_CHARS
            "."
           ) ]
         ]
        :PN_CHARS
       ) ]
     ]
   )
.

:PN_LOCAL rdfs:label "PN_LOCAL"; rdf:value "100s";
 rdfs:comment "[100s] PN_LOCAL ::= ( PN_CHARS_U | [0-9] | PLX ) ( ( PN_CHARS | '.' | PLX )*  ( PN_CHARS | PLX ) ) ?";
  re:seq (
    [ re:alt (
      :PN_CHARS_U
      [  re:matches "[0-9]"  ]
      :PLX
     ) ]
    [ re:opt 
      [ re:seq (
        [ re:star 
          [ re:alt (
            :PN_CHARS
            "."
            :PLX
           ) ]
         ]
        [ re:alt (
          :PN_CHARS
          :PLX
         ) ]
       ) ]
     ]
   )
.

:PLX rdfs:label "PLX"; rdf:value "160s";
 rdfs:comment "[160s] PLX ::= PERCENT | PN_LOCAL_ESC";
  re:alt (
    :PERCENT
    :PN_LOCAL_ESC
   )
.

:PERCENT rdfs:label "PERCENT"; rdf:value "161s";
 rdfs:comment "[161s] PERCENT ::= '%' HEX HEX";
  re:seq (
    "%"
    :HEX
    :HEX
   )
.

:HEX rdfs:label "HEX"; rdf:value "162s";
 rdfs:comment "[162s] HEX ::= [0-9] | [A-F] | [a-f]";
  re:alt (
    [  re:matches "[0-9]"  ]
    [  re:matches "[A-F]"  ]
    [  re:matches "[a-f]"  ]
   )
.

:PN_LOCAL_ESC rdfs:label "PN_LOCAL_ESC"; rdf:value "163s";
 rdfs:comment "[163s] PN_LOCAL_ESC ::= '\\\\' ( '_' | '~' | '.' | '-' | '!' | '$' | '&' | \"'\" | '(' | ')' | '*' | '+' | ',' | ';' | '=' | ':' | '/' | '?' | '#' | '@' | '%' )";
  re:seq (
    "\\\\"
    [ re:alt (
      "_"
      "~"
      "."
      "-"
      "!"
      "$"
      "&"
      "'"
      "("
      ")"
      "*"
      "+"
      ","
      ";"
      "="
      ":"
      "/"
      "?"
      "#"
      "@"
      "%"
     ) ]
   )
.
